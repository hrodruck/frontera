{
  "zones": {
    "underground-empire": {
      "description": "You are in a strange land, above and below ground, filled with mystery and peril.",
      "subzones": {
        "white-house": {
          "short_description": "West of a small white house",
          "long_description": "You stand west of a small white house with a boarded front door. A path leads north into a forest, and a mailbox stands nearby. Beneath your feet, a faint trapdoor creaks.",
          "objects": {
            "mailbox": {
              "initial_state": {
                "is_open": false,
                "contents": ["leaflet"],
                "human_readable_description": "A small mailbox, weathered but sturdy.",
                "is_locked": false
              },
              "tools": {
                "open": {
                  "name": "open",
                  "human_readable_description": "Opens the mailbox",
                  "function": "lambda self: self.update_state({\"is_open\": True, \"human_readable_description\": \"An open mailbox with a leaflet inside\"}) if not self.state[\"is_open\"] else 'It’s already open!'"
                },
                "take": {
                  "name": "take",
                  "human_readable_description": "Takes the contents of the mailbox",
                  "function": "lambda self, target: target.update_state({\"inventory\": target.state.get(\"inventory\", []) + self.state[\"contents\"]}) and self.update_state({\"contents\": [], \"human_readable_description\": \"An empty, open mailbox\"}) if self.state[\"is_open\"] and self.state[\"contents\"] else 'Nothing to take!'"
                }
              }
            },
            "leaflet": {
              "initial_state": {
                "is_read": false,
                "human_readable_description": "A faded leaflet welcoming you to the Great Underground Empire.",
                "owner": "none",
                "grabbed": false
              },
              "tools": {
                "read": {
                  "name": "read",
                  "human_readable_description": "Reads the leaflet",
                  "function": "lambda self: self.update_state({\"is_read\": True}) and 'It reads: \"Welcome to Zork! Treasures await below, but beware the grue.\"'"
                },
                "be_grabbed": {
                  "name": "be_grabbed",
                  "human_readable_description": "Picks up the leaflet",
                  "function": "lambda self, new_player: self.update_state({\"grabbed\": True, \"location_within_subzone\": \"in the inventory of \" + new_player, \"owner\": new_player}) if not self.state[\"grabbed\"] else 'It’s already taken!'",
                  "reviewed": true
                }
              }
            },
            "trapdoor": {
              "initial_state": {
                "is_open": false,
                "is_locked": true,
                "exit_leads_to": "cellar",
                "human_readable_description": "A wooden trapdoor set into the ground, locked tight.",
                "durability": 50,
                "is_broken": false
              },
              "tools": {
                "unlock": {
                  "name": "unlock",
                  "human_readable_description": "Unlocks the trapdoor with a key",
                  "function": "lambda self, key: self.update_state({\"is_locked\": False, \"human_readable_description\": \"An unlocked trapdoor, slightly ajar\"}) if key.state.get(\"id\") == \"skeleton_key\" else 'The key doesn’t fit!'"
                },
                "break": {
                  "name": "break",
                  "human_readable_description": "Smashes the trapdoor",
                  "function": "lambda self, amount=20: self.update_state({\"durability\": self.state[\"durability\"] - amount, \"is_broken\": True if self.state[\"durability\"] <= amount else False, \"is_locked\": False if self.state[\"durability\"] <= amount else True, \"human_readable_description\": \"A shattered trapdoor, revealing a dark descent\" if self.state[\"durability\"] <= amount else self.state[\"human_readable_description\"]})",
                  "reviewed": true
                },
                "pass_through": {
                  "name": "pass_through",
                  "human_readable_description": "Descends through the trapdoor",
                  "function": "lambda self, target: target.update_state({\"allowed_moves\": self.state.get(\"exit_leads_to\")}) if not self.state[\"is_locked\"] and self.state[\"exit_leads_to\"] in target.state.get(\"existing_places\", []) else 'It’s locked or broken shut!'",
                  "reviewed": true
                }
              }
            }
          }
        },
        "cellar": {
          "short_description": "A damp, dark cellar",
          "long_description": "You’re in a gloomy cellar beneath the white house. A rickety ladder leads up, and a narrow passage heads east. The air feels heavy with unseen eyes.",
          "objects": {
            "brass_lantern": {
              "initial_state": {
                "is_lit": false,
                "fuel_level": 100,
                "location_within_subzone": "on a dusty shelf",
                "human_readable_description": "A tarnished brass lantern, cold and unlit.",
                "owner": "none",
                "grabbed": false
              },
              "tools": {
                "light": {
                  "name": "light",
                  "human_readable_description": "Lights the lantern",
                  "function": "lambda self: self.update_state({\"is_lit\": True, \"human_readable_description\": \"A brass lantern glowing warmly\"}) if self.state[\"fuel_level\"] > 0 else 'It’s out of fuel!'"
                },
                "snuff": {
                  "name": "snuff",
                  "human_readable_description": "Puts out the lantern",
                  "function": "lambda self: self.update_state({\"is_lit\": False, \"human_readable_description\": \"A tarnished brass lantern, cold and unlit\"})"
                },
                "be_grabbed": {
                  "name": "be_grabbed",
                  "human_readable_description": "Picks up the lantern",
                  "function": "lambda self, new_player: self.update_state({\"grabbed\": True, \"location_within_subzone\": \"in the inventory of \" + new_player, \"owner\": new_player}) if not self.state[\"grabbed\"] else 'It’s already taken!'",
                  "reviewed": true
                }
              }
            },
            "elvish_sword": {
              "initial_state": {
                "is_glowing": false,
                "location_within_subzone": "leaning against the wall",
                "human_readable_description": "An ancient Elvish sword, faintly etched with runes.",
                "owner": "none",
                "grabbed": false
              },
              "tools": {
                "be_grabbed": {
                  "name": "be_grabbed",
                  "human_readable_description": "Picks up the sword",
                  "function": "lambda self, new_player: self.update_state({\"grabbed\": True, \"location_within_subzone\": \"in the inventory of \" + new_player, \"owner\": new_player}) if not self.state[\"grabbed\"] else 'It’s already taken!'",
                  "reviewed": true
                },
                "sense_danger": {
                  "name": "sense_danger",
                  "human_readable_description": "Glows faintly when danger is near",
                  "function": "lambda self: self.update_state({\"is_glowing\": True, \"human_readable_description\": \"An Elvish sword glowing with a faint blue light\"}) if any(obj.object_name == \"thief\" for obj in self.engine_game_objects[self.state[\"zone\"]][self.state[\"subzone\"]].active_game_objects.values()) else 'The sword remains dim.'"
                }
              }
            },
            "trophy_case": {
              "initial_state": {
                "is_open": true,
                "contents": [],
                "human_readable_description": "A glass trophy case, empty and waiting for treasures.",
                "treasure_count": 0
              },
              "tools": {
                "deposit": {
                  "name": "deposit",
                  "human_readable_description": "Places a treasure in the case",
                  "function": "lambda self, item, target: self.update_state({\"contents\": self.state[\"contents\"] + [item.state[\"id\"]], \"treasure_count\": self.state[\"treasure_count\"] + 1, \"human_readable_description\": \"A glass trophy case holding \" + str(self.state[\"treasure_count\"] + 1) + \" treasures\"}) and target.update_state({\"inventory\": [i for i in target.state[\"inventory\"] if i != item.state[\"id\"]]}) if item.state.get(\"is_treasure\") else 'That’s no treasure!'"
                }
              }
            },
            "ladder": {
              "initial_state": {
                "is_usable": true,
                "exit_leads_to": "white-house",
                "human_readable_description": "A rickety wooden ladder leading up."
              },
              "tools": {
                "pass_through": {
                  "name": "pass_through",
                  "human_readable_description": "Climbs the ladder",
                  "function": "lambda self, target: target.update_state({\"allowed_moves\": self.state.get(\"exit_leads_to\")}) if self.state[\"is_usable\"] and self.state[\"exit_leads_to\"] in target.state.get(\"existing_places\", []) else 'The ladder’s broken or leads nowhere!'",
                  "reviewed": true
                }
              }
            }
          }
        },
        "living-room": {
          "short_description": "A dimly lit living room",
          "long_description": "You’re in an ancient living room carved into stone. A passage leads west, and a trapdoor sits in the floor. A painting hangs crookedly on the wall.",
          "objects": {
            "painting": {
              "initial_state": {
                "is_moved": false,
                "human_readable_description": "A dusty painting of a noble figure, slightly askew.",
                "hidden_item": "jeweled_egg"
              },
              "tools": {
                "move": {
                  "name": "move",
                  "human_readable_description": "Shifts the painting",
                  "function": "lambda self: self.update_state({\"is_moved\": True, \"human_readable_description\": \"A painting swung aside, revealing a niche\"})"
                },
                "inspect": {
                  "name": "inspect",
                  "human_readable_description": "Looks behind the painting",
                  "function": "lambda self: 'You find a jeweled egg nestled in a niche!' if self.state[\"is_moved\"] else 'It’s just a dusty old painting.'"
                }
              }
            },
            "jeweled_egg": {
              "initial_state": {
                "is_treasure": true,
                "id": "jeweled_egg",
                "location_within_subzone": "behind the painting",
                "human_readable_description": "A delicate egg encrusted with glittering jewels.",
                "owner": "none",
                "grabbed": false
              },
              "tools": {
                "be_grabbed": {
                  "name": "be_grabbed",
                  "human_readable_description": "Picks up the egg",
                  "function": "lambda self, new_player: self.update_state({\"grabbed\": True, \"location_within_subzone\": \"in the inventory of \" + new_player, \"owner\": new_player}) if not self.state[\"grabbed\"] else 'It’s already taken!'",
                  "reviewed": true
                }
              }
            },
            "lower_trapdoor": {
              "initial_state": {
                "is_open": false,
                "exit_leads_to": "flood-control-dam",
                "human_readable_description": "A heavy trapdoor in the floor, sealed shut."
              },
              "tools": {
                "open": {
                  "name": "open",
                  "human_readable_description": "Forces the trapdoor open",
                  "function": "lambda self: self.update_state({\"is_open\": True, \"human_readable_description\": \"An open trapdoor revealing a steep drop\"})"
                },
                "pass_through": {
                  "name": "pass_through",
                  "human_readable_description": "Descends through the trapdoor",
                  "function": "lambda self, target: target.update_state({\"allowed_moves\": self.state.get(\"exit_leads_to\")}) if self.state[\"is_open\"] and self.state[\"exit_leads_to\"] in target.state.get(\"existing_places\", []) else 'It’s shut tight!'",
                  "reviewed": true
                }
              }
            }
          }
        },
        "flood-control-dam": {
          "short_description": "Flood Control Dam #3",
          "long_description": "You stand before a massive dam, its machinery humming. A passage leads up, and a skeleton lies in the corner. Darkness looms without light.",
          "objects": {
            "skeleton": {
              "initial_state": {
                "is_searched": false,
                "human_readable_description": "A crumbling skeleton clutching something in its bony hand.",
                "hidden_item": "skeleton_key"
              },
              "tools": {
                "search": {
                  "name": "search",
                  "human_readable_description": "Searches the skeleton",
                  "function": "lambda self: self.update_state({\"is_searched\": True, \"human_readable_description\": \"A searched skeleton, its grip loosened\"}) and 'You find a skeleton key!'"
                }
              }
            },
            "skeleton_key": {
              "initial_state": {
                "id": "skeleton_key",
                "location_within_subzone": "in the skeleton’s hand",
                "human_readable_description": "A rusty key shaped like a skull.",
                "owner": "none",
                "grabbed": false
              },
              "tools": {
                "be_grabbed": {
                  "name": "be_grabbed",
                  "human_readable_description": "Picks up the key",
                  "function": "lambda self, new_player: self.update_state({\"grabbed\": True, \"location_within_subzone\": \"in the inventory of \" + new_player, \"owner\": new_player}) if not self.state[\"grabbed\"] else 'It’s already taken!'",
                  "reviewed": true
                }
              }
            },
            "golden_chalice": {
              "initial_state": {
                "is_treasure": true,
                "id": "golden_chalice",
                "location_within_subzone": "on a ledge above the dam",
                "human_readable_description": "A gleaming chalice of solid gold.",
                "owner": "none",
                "grabbed": false
              },
              "tools": {
                "be_grabbed": {
                  "name": "be_grabbed",
                  "human_readable_description": "Picks up the chalice",
                  "function": "lambda self, new_player: self.update_state({\"grabbed\": True, \"location_within_subzone\": \"in the inventory of \" + new_player, \"owner\": new_player}) if not self.state[\"grabbed\"] else 'It’s already taken!'",
                  "reviewed": true
                }
              }
            },
            "thief": {
              "initial_state": {
                "is_active": true,
                "location_within_subzone": "lurking in the shadows",
                "human_readable_description": "A sly thief eyeing your every move.",
                "stolen_items": []
              },
              "tools": {
                "steal": {
                  "name": "steal",
                  "human_readable_description": "Attempts to steal from the player",
                  "function": "lambda self, target: self.update_state({\"stolen_items\": self.state[\"stolen_items\"] + [target.state[\"inventory\"][0]], \"human_readable_description\": \"A thief grinning with your loot\"}) and target.update_state({\"inventory\": target.state[\"inventory\"][1:]}) if target.state.get(\"inventory\") else 'The thief finds nothing to take!'"
                },
                "attack": {
                  "name": "attack",
                  "human_readable_description": "Fights the thief",
                  "function": "lambda self, weapon, target: self.update_state({\"is_active\": False, \"human_readable_description\": \"A defeated thief sprawled on the ground\"}) and 'The thief falls!' if weapon.state.get(\"id\") == \"elvish_sword\" else 'The thief dodges and laughs!'"
                }
              }
            }
          }
        },
        "maze": {
          "short_description": "A twisting maze of passages",
          "long_description": "You’re lost in a maze of twisty little passages, all alike. Exits seem to shift—north, east, or up?",
          "objects": {
            "platinum_bar": {
              "initial_state": {
                "is_treasure": true,
                "id": "platinum_bar",
                "location_within_subzone": "half-buried in dirt",
                "human_readable_description": "A heavy bar of pure platinum.",
                "owner": "none",
                "grabbed": false
              },
              "tools": {
                "be_grabbed": {
                  "name": "be_grabbed",
                  "human_readable_description": "Picks up the bar",
                  "function": "lambda self, new_player: self.update_state({\"grabbed\": True, \"location_within_subzone\": \"in the inventory of \" + new_player, \"owner\": new_player}) if not self.state[\"grabbed\"] else 'It’s already taken!'",
                  "reviewed": true
                }
              }
            },
            "grue": {
              "initial_state": {
                "is_active": true,
                "location_within_subzone": "lurking in the dark",
                "human_readable_description": "A sinister grue, its eyes glinting faintly."
              },
              "tools": {
                "devour": {
                  "name": "devour",
                  "human_readable_description": "Eats the player in darkness",
                  "function": "lambda self, target: 'You are eaten by a grue!' and target.update_state({\"is_alive\": False}) if not any(obj.state.get(\"is_lit\") for obj in target.engine_game_objects[target.state[\"zone\"]][target.state[\"subzone\"]].active_game_objects.values() if obj.state.get(\"owner\") == target.object_name) else 'The grue recoils from the light!'"
                }
              }
            },
            "maze_exit": {
              "initial_state": {
                "exit_leads_to": "cellar",
                "human_readable_description": "A faint outline of an exit in the maze."
              },
              "tools": {
                "pass_through": {
                  "name": "pass_through",
                  "human_readable_description": "Navigates out of the maze",
                  "function": "lambda self, target: target.update_state({\"allowed_moves\": self.state.get(\"exit_leads_to\")}) if self.state[\"exit_leads_to\"] in target.state.get(\"existing_places\", []) else 'You’re still lost!'",
                  "reviewed": true
                }
              }
            }
          }
        }
      }
    }
  },
  "defaultZone": "underground-empire",
  "defaultSubzone": "white-house"
}